# Makefile pour NOF1 Trading Bot
# Utilisation: make <target>

.PHONY: help setup dev test lint clean status logs install stop

# Variables
PYTHON = backend/venv/bin/python
PIP = backend/venv/bin/pip
NPM = npm

help: ## Affiche cette aide
	@echo "üöÄ NOF1 Trading Bot - Commandes disponibles:"
	@echo ""
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "  \033[36m%-15s\033[0m %s\n", $$1, $$2}'
	@echo ""

setup: ## Configuration compl√®te de l'environnement
	@echo "üöÄ Configuration de l'environnement..."
	./setup.sh
	@make install
	@echo "‚úÖ Setup termin√©!"

install: ## Installe les d√©pendances
	@echo "üì¶ Installation des d√©pendances..."
	@if [ -f "frontend/package.json" ]; then \
		cd frontend && $(NPM) install; \
	fi
	@echo "‚úÖ D√©pendances install√©es"

dev: ## Lance le serveur en mode d√©veloppement
	@echo "üöÄ Mode d√©veloppement..."
	./dev.sh

start: ## D√©marre le serveur backend
	@echo "üöÄ D√©marrage du serveur..."
	./start.sh

stop: ## Arr√™te tous les services
	@echo "üõë Arr√™t des services..."
	@docker-compose down || (cd docker && docker-compose down && cd ..)
	@echo "‚úÖ Services arr√™t√©s"

test: ## Ex√©cute les tests
	@echo "üß™ Ex√©cution des tests..."
	@if [ -d "backend/tests" ]; then \
		cd backend && $(PYTHON) -m pytest tests/ -v; \
	fi
	@echo "‚úÖ Tests termin√©s"

test-audit: ## Ex√©cute les tests d'audit
	@echo "üîç Tests d'audit..."
	@cd backend/scripts/tests && $(PYTHON) audit_critical_paths.py

lint: ## Formatage et linting du code
	@echo "üé® Formatage du code..."
	@cd backend && $(PIP) install black isort mypy > /dev/null 2>&1 || true
	@cd backend && $(PYTHON) -m black . --line-length 100
	@cd backend && $(PYTHON) -m isort . --profile black
	@echo "‚úÖ Code format√©"

type-check: ## V√©rification des types
	@echo "üîç V√©rification des types..."
	@cd backend && $(PYTHON) -m mypy src --config-file=pyproject.toml

clean: ## Nettoie les caches et logs
	@echo "üßπ Nettoyage..."
	@find . -name "__pycache__" -type d -exec rm -rf {} + 2>/dev/null || true
	@find . -name "*.pyc" -delete 2>/dev/null || true
	@rm -f backend.log
	@rm -rf frontend/node_modules 2>/dev/null || true
	@rm -rf frontend/dist 2>/dev/null || true
	@echo "‚úÖ Nettoyage termin√©"

status: ## Affiche le statut des services
	@echo "üìä Statut des services:"
	@echo ""
	@echo "üê≥ Docker containers:"
	@docker ps --filter "name=trading_agent" || echo "Docker non disponible"
	@echo ""
	@echo "üåê Services web:"
	@curl -s http://localhost:8020/health > /dev/null && echo "‚úÖ API Backend: Fonctionnel" || echo "‚ùå API Backend: Non accessible"
	@curl -s http://localhost:5173 > /dev/null && echo "‚úÖ Frontend: Fonctionnel" || echo "‚ùå Frontend: Non accessible"

logs: ## Affiche les logs
	@echo "üìã Logs:"
	@if [ -f "backend.log" ]; then \
		tail -f backend.log; \
	else \
		echo "Logs backend non trouv√©s"; \
	fi

build: ## Build le frontend
	@echo "üèóÔ∏è Build du frontend..."
	@cd frontend && $(NPM) run build
	@echo "‚úÖ Build termin√©"

reset: ## Reset complet (danger!)
	@echo "‚ö†Ô∏è Reset complet - Supprime toutes les donn√©es!"
	@make stop
	@docker-compose down -v || (cd docker && docker-compose down -v && cd ..)
	@make clean
	@echo "‚úÖ Reset termin√©"

# Commandes docker directes
db-shell: ## Shell dans PostgreSQL
	@docker exec -it trading_agent_postgres psql -U postgres -d trading_agent

db-backup: ## Backup de la base de donn√©es
	@docker exec trading_agent_postgres pg_dump -U postgres trading_agent > backup_$(shell date +%Y%m%d_%H%M%S).sql
	@echo "‚úÖ Backup cr√©√©"

redis-cli: ## Client Redis
	@docker exec -it trading_agent_redis redis-cli

# Debug
debug-backend: ## Debug du backend avec pdb
	@cd backend && $(PYTHON) -m pdb src/main.py

debug-logs: ## Logs d√©taill√©s
	@docker-compose logs -f --tail=100 || (cd docker && docker-compose logs -f --tail=100 && cd ..)

# Utilitaires
health-check: ## V√©rifie la sant√© de tous les services
	@echo "üîç Health check..."
	@curl -f http://localhost:8020/health || echo "‚ùå API Backend DOWN"
	@curl -f http://localhost:5173 || echo "‚ùå Frontend DOWN"
	@docker exec trading_agent_postgres pg_isready -U postgres || echo "‚ùå PostgreSQL DOWN"
	@docker exec trading_agent_redis redis-cli ping || echo "‚ùå Redis DOWN"
	@echo "‚úÖ Health check termin√©"

# Aliases
up: dev
down: stop
restart: stop dev
check: type-check test

# Installation initiale
init: setup
	@echo ""
	@echo "üéâ Initialisation termin√©e!"
	@echo "Prochaines √©tapes:"
	@echo "  1. Configurez vos cl√©s API dans .env"
	@echo "  2. Lancez: make dev"
	@echo "  3. Ouvrez: http://localhost:5173"
