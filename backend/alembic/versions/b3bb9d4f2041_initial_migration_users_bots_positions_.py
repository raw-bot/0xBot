"""Initial migration: users, bots, positions, trades, llm_decisions, alerts

Revision ID: b3bb9d4f2041
Revises: 
Create Date: 2025-10-20 08:32:53.321196

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = 'b3bb9d4f2041'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('users',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('email', sa.String(length=255), nullable=False),
    sa.Column('password_hash', sa.String(length=255), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_table('bots',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('model_name', sa.Enum('CLAUDE_SONNET', 'GPT4', 'DEEPSEEK_V3', 'GEMINI_PRO', name='model_name_enum', create_constraint=True), nullable=False),
    sa.Column('capital', sa.Numeric(precision=20, scale=2), nullable=False),
    sa.Column('risk_params', sa.JSON(), nullable=False),
    sa.Column('status', sa.Enum('INACTIVE', 'ACTIVE', 'PAUSED', 'STOPPED', name='bot_status_enum', create_constraint=True), nullable=False),
    sa.Column('paper_trading', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_bots_user_id'), 'bots', ['user_id'], unique=False)
    op.create_table('alerts',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('bot_id', sa.UUID(), nullable=True),
    sa.Column('type', sa.Enum('TRADE', 'PNL', 'RISK', 'ERROR', name='alert_type_enum', create_constraint=True), nullable=False),
    sa.Column('severity', sa.Enum('INFO', 'WARNING', 'CRITICAL', name='alert_severity_enum', create_constraint=True), nullable=False),
    sa.Column('message', sa.String(length=1000), nullable=False),
    sa.Column('read', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['bot_id'], ['bots.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_alerts_bot_id'), 'alerts', ['bot_id'], unique=False)
    op.create_index(op.f('ix_alerts_created_at'), 'alerts', ['created_at'], unique=False)
    op.create_index(op.f('ix_alerts_user_id'), 'alerts', ['user_id'], unique=False)
    op.create_table('llm_decisions',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('bot_id', sa.UUID(), nullable=False),
    sa.Column('prompt', sa.Text(), nullable=False),
    sa.Column('response', sa.Text(), nullable=False),
    sa.Column('parsed_decisions', sa.JSON(), nullable=False),
    sa.Column('tokens_used', sa.Integer(), nullable=False),
    sa.Column('cost', sa.Numeric(precision=10, scale=6), nullable=False),
    sa.Column('timestamp', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['bot_id'], ['bots.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_llm_decisions_bot_id'), 'llm_decisions', ['bot_id'], unique=False)
    op.create_index(op.f('ix_llm_decisions_timestamp'), 'llm_decisions', ['timestamp'], unique=False)
    op.create_table('positions',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('bot_id', sa.UUID(), nullable=False),
    sa.Column('symbol', sa.String(length=50), nullable=False),
    sa.Column('side', sa.Enum('LONG', 'SHORT', name='position_side_enum', create_constraint=True), nullable=False),
    sa.Column('quantity', sa.Numeric(precision=20, scale=8), nullable=False),
    sa.Column('entry_price', sa.Numeric(precision=20, scale=2), nullable=False),
    sa.Column('current_price', sa.Numeric(precision=20, scale=2), nullable=False),
    sa.Column('stop_loss', sa.Numeric(precision=20, scale=2), nullable=True),
    sa.Column('take_profit', sa.Numeric(precision=20, scale=2), nullable=True),
    sa.Column('status', sa.Enum('OPEN', 'CLOSED', name='position_status_enum', create_constraint=True), nullable=False),
    sa.Column('opened_at', sa.DateTime(), nullable=False),
    sa.Column('closed_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['bot_id'], ['bots.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_positions_bot_id'), 'positions', ['bot_id'], unique=False)
    op.create_index(op.f('ix_positions_symbol'), 'positions', ['symbol'], unique=False)
    op.create_table('trades',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('bot_id', sa.UUID(), nullable=False),
    sa.Column('position_id', sa.UUID(), nullable=True),
    sa.Column('symbol', sa.String(length=50), nullable=False),
    sa.Column('side', sa.Enum('BUY', 'SELL', name='trade_side_enum', create_constraint=True), nullable=False),
    sa.Column('quantity', sa.Numeric(precision=20, scale=8), nullable=False),
    sa.Column('price', sa.Numeric(precision=20, scale=2), nullable=False),
    sa.Column('fees', sa.Numeric(precision=20, scale=2), nullable=False),
    sa.Column('realized_pnl', sa.Numeric(precision=20, scale=2), nullable=False),
    sa.Column('executed_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['bot_id'], ['bots.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['position_id'], ['positions.id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_trades_bot_id'), 'trades', ['bot_id'], unique=False)
    op.create_index(op.f('ix_trades_executed_at'), 'trades', ['executed_at'], unique=False)
    op.create_index(op.f('ix_trades_position_id'), 'trades', ['position_id'], unique=False)
    op.create_index(op.f('ix_trades_symbol'), 'trades', ['symbol'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_trades_symbol'), table_name='trades')
    op.drop_index(op.f('ix_trades_position_id'), table_name='trades')
    op.drop_index(op.f('ix_trades_executed_at'), table_name='trades')
    op.drop_index(op.f('ix_trades_bot_id'), table_name='trades')
    op.drop_table('trades')
    op.drop_index(op.f('ix_positions_symbol'), table_name='positions')
    op.drop_index(op.f('ix_positions_bot_id'), table_name='positions')
    op.drop_table('positions')
    op.drop_index(op.f('ix_llm_decisions_timestamp'), table_name='llm_decisions')
    op.drop_index(op.f('ix_llm_decisions_bot_id'), table_name='llm_decisions')
    op.drop_table('llm_decisions')
    op.drop_index(op.f('ix_alerts_user_id'), table_name='alerts')
    op.drop_index(op.f('ix_alerts_created_at'), table_name='alerts')
    op.drop_index(op.f('ix_alerts_bot_id'), table_name='alerts')
    op.drop_table('alerts')
    op.drop_index(op.f('ix_bots_user_id'), table_name='bots')
    op.drop_table('bots')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.drop_table('users')
    # ### end Alembic commands ###
