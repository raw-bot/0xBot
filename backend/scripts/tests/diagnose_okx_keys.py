"""Diagnostic d√©taill√© des cl√©s API OKX."""

import os
import asyncio
from dotenv import load_dotenv
import ccxt.async_support as ccxt

# Load environment variables
load_dotenv()

async def diagnose_okx_api():
    """Diagnostic complet des cl√©s API OKX."""
    
    api_key = os.getenv("OKX_API_KEY")
    secret_key = os.getenv("OKX_SECRET_KEY")
    passphrase = os.getenv("OKX_PASSPHRASE")
    
    print("=" * 80)
    print("üîç DIAGNOSTIC DES CL√âS API OKX")
    print("=" * 80)
    print()
    
    # 1. V√©rifier que les cl√©s existent
    print("üìã 1. V√©rification des variables d'environnement")
    print("-" * 80)
    print(f"OKX_API_KEY: {'‚úÖ Pr√©sente' if api_key else '‚ùå Manquante'}")
    if api_key:
        print(f"  Format: {api_key[:12]}...{api_key[-8:]}")
    print(f"OKX_SECRET_KEY: {'‚úÖ Pr√©sente' if secret_key else '‚ùå Manquante'}")
    if secret_key:
        print(f"  Format: {secret_key[:8]}...{secret_key[-8:]}")
    print(f"OKX_PASSPHRASE: {'‚úÖ Pr√©sente' if passphrase else '‚ùå Manquante'}")
    if passphrase:
        print(f"  Longueur: {len(passphrase)} caract√®res")
    print()
    
    # 2. Test en mode LIVE
    print("üî¥ 2. Test avec LIVE API (vos cl√©s actuelles)")
    print("-" * 80)
    try:
        exchange_live = ccxt.okx({
            'apiKey': api_key,
            'secret': secret_key,
            'password': passphrase,
            'enableRateLimit': True,
            'options': {
                'defaultType': 'swap',
            }
        })
        
        print("Tentative de r√©cup√©ration du compte...")
        account = await exchange_live.fetch_balance()
        print("‚úÖ SUCC√àS! Vos cl√©s fonctionnent en mode LIVE")
        print(f"Compte: {account.get('info', {}).get('uid', 'N/A')}")
        
        # Check balances
        usdt_balance = account.get('USDT', {})
        print(f"Balance USDT: {usdt_balance.get('free', 0)} USDT")
        
        await exchange_live.close()
        
    except Exception as e:
        error_msg = str(e)
        print(f"‚ùå √âCHEC en mode LIVE")
        print(f"Erreur: {error_msg}")
        
        if "50119" in error_msg or "doesn't exist" in error_msg:
            print()
            print("‚ö†Ô∏è  DIAGNOSTIC:")
            print("  Vos cl√©s API ne sont pas valides ou ont √©t√© d√©sactiv√©es")
            print()
            print("  Raisons possibles:")
            print("  1. Les cl√©s ont √©t√© cr√©√©es mais pas encore activ√©es (attendez quelques minutes)")
            print("  2. Les cl√©s ont √©t√© r√©voqu√©es depuis OKX")
            print("  3. L'adresse IP n'est pas dans la whitelist (si configur√©e)")
            print("  4. Les permissions ne sont pas correctes")
        
        elif "50113" in error_msg or "Invalid sign" in error_msg:
            print()
            print("‚ö†Ô∏è  DIAGNOSTIC:")
            print("  Le SECRET_KEY ou le PASSPHRASE est incorrect")
            print("  V√©rifiez que vous avez copi√©/coll√© correctement")
    print()
    
    # 3. Test en mode DEMO
    print("üß™ 3. Test avec DEMO API")
    print("-" * 80)
    print("Note: OKX n√©cessite des cl√©s API S√âPAR√âES pour le mode d√©mo")
    print()
    try:
        exchange_demo = ccxt.okx({
            'apiKey': api_key,
            'secret': secret_key,
            'password': passphrase,
            'enableRateLimit': True,
            'options': {
                'defaultType': 'swap',
                'demo': True,
            }
        })
        
        print("Tentative de r√©cup√©ration du compte DEMO...")
        await exchange_demo.load_markets()
        print("‚úÖ SUCC√àS! Vos cl√©s fonctionnent en mode DEMO")
        
        await exchange_demo.close()
        
    except Exception as e:
        error_msg = str(e)
        print(f"‚ùå √âCHEC en mode DEMO")
        print(f"Erreur: {error_msg}")
        
        if "50119" in error_msg:
            print()
            print("‚ö†Ô∏è  DIAGNOSTIC:")
            print("  Vos cl√©s sont pour le compte LIVE, pas pour le compte DEMO")
            print()
            print("  üí° SOLUTION:")
            print("  Pour utiliser le mode d√©mo OKX, vous devez:")
            print("  1. Cr√©er un compte d√©mo sur OKX (s√©par√© du compte live)")
            print("  2. Cr√©er des cl√©s API sp√©cifiques pour ce compte d√©mo")
            print("  3. Remplacer les cl√©s dans le .env")
            print()
            print("  OU (recommand√© pour le paper trading):")
            print("  Utilisez l'API publique sans authentification")
            print("  ‚Üí C'est ce que le bot fait actuellement en mode paper_trading")
    print()
    
    # 4. Recommandation finale
    print("=" * 80)
    print("üìä RECOMMANDATION")
    print("=" * 80)
    print()
    print("Pour le PAPER TRADING (simulation):")
    print("  ‚úÖ Utilisez l'API publique (pas besoin de cl√©s)")
    print("  ‚úÖ C'est ce que votre bot fait actuellement")
    print("  ‚úÖ Donn√©es r√©elles + trades simul√©s en DB")
    print()
    print("Pour le LIVE TRADING (argent r√©el):")
    print("  1. V√©rifiez que vos cl√©s LIVE fonctionnent (test ci-dessus)")
    print("  2. Activez les permissions: Read + Trade (PAS Withdraw)")
    print("  3. Configurez paper_trading=False dans le bot")
    print()

if __name__ == "__main__":
    asyncio.run(diagnose_okx_api())